--- typecore.ml.orig	2010-08-19 16:00:58.000000000 -0400
+++ typecore.ml	2010-08-19 16:01:25.000000000 -0400
@@ -1,3 +1,15 @@
+(*
+ * This file is part of ocamljs, OCaml to Javascript compiler
+ * Copyright (C) 2010 Jake Donham
+ *
+ * This program is free software released under the QPL.
+ * See LICENSE for more details.
+ *
+ * The Software is provided AS IS with NO WARRANTY OF ANY KIND,
+ * INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND 
+ * FITNESS FOR A PARTICULAR PURPOSE.
+ *)
+
 (***********************************************************************)
 (*                                                                     *)
 (*                           Objective Caml                            *)
@@ -10,7 +22,7 @@
 (*                                                                     *)
 (***********************************************************************)
 
-(* $Id: typecore.ml 10624 2010-07-12 09:36:07Z garrigue $ *)
+(* $Id: typecore.ml 10540 2010-06-08 03:20:26Z garrigue $ *)
 
 (* Typechecking for the core language *)
 
@@ -690,32 +702,8 @@
       Vars.fold (fun _ (mut,_,_) b -> decr count; b && mut = Immutable)
         vars true &&
       !count = 0
-  | Texp_pack mexp ->
-      is_nonexpansive_mod mexp
   | _ -> false
 
-and is_nonexpansive_mod mexp =
-  match mexp.mod_desc with
-  | Tmod_ident _ -> true
-  | Tmod_functor _ -> true
-  | Tmod_unpack (e, _) -> is_nonexpansive e
-  | Tmod_constraint (m, _, _) -> is_nonexpansive_mod m
-  | Tmod_structure items ->
-      List.for_all
-        (function
-          | Tstr_eval _ | Tstr_primitive _ | Tstr_type _ | Tstr_modtype _
-          | Tstr_open _ | Tstr_cltype _ | Tstr_exn_rebind _ -> true
-          | Tstr_value (_, pat_exp_list) ->
-              List.for_all (fun (_, exp) -> is_nonexpansive exp) pat_exp_list
-          | Tstr_module (_, m) | Tstr_include (m, _) -> is_nonexpansive_mod m
-          | Tstr_recmodule id_mod_list ->
-              List.for_all (fun (_, m) -> is_nonexpansive_mod m) id_mod_list
-          | Tstr_exception _ -> false (* true would be unsound *)
-          | Tstr_class _ -> false (* could be more precise *)
-        )
-        items
-  | Tmod_apply _ -> false
-
 and is_nonexpansive_opt = function
     None -> true
   | Some e -> is_nonexpansive e
@@ -1414,17 +1402,21 @@
                   let (obj_ty, res_ty) = filter_arrow env method_type "" in
                   unify env obj_ty desc.val_type;
                   unify env res_ty (instance typ);
-                  (Texp_apply({ exp_desc = Texp_ident(Path.Pident method_id,
-                                                     {val_type = method_type;
-                                                       val_kind = Val_reg});
-                                exp_loc = loc;
-                                exp_type = method_type;
-                                exp_env = env },
-                              [Some {exp_desc = Texp_ident(path, desc);
-                                     exp_loc = obj.exp_loc;
-                                     exp_type = desc.val_type;
-                                     exp_env = env },
-                               Required]),
+                  (*
+                    method_id here is an function, not a slot as in
+                    the self case. we mark it (through a gross hack)
+                    so we can do the right thing in jsgen.ml
+                  *)
+                  let flags_field = 2 in (* see ident.ml *)
+                  let repr = Obj.repr method_id in
+                  let flags = (Obj.obj (Obj.field repr flags_field) : int) in
+                  let flags = flags lor 4 in (* unused bit we will check in jsgen.ml *)
+                  Obj.set_field repr flags_field (Obj.repr flags);
+                  (Texp_send({exp_desc = Texp_ident(path, desc);
+                              exp_loc = obj.exp_loc;
+                              exp_type = desc.val_type;
+                              exp_env = env },
+                             Tmeth_val method_id),
                    typ)
               |  _ ->
                   assert false
